@page
@using CleanMicroserviceSystem.DataStructure;
@using System.Security.Claims;
@model IndexModel
@{
    ViewData["Title"] = "NTLM";
    int countdownSeconds = 3;
    var succeeded = (this.Model.ClientLoginResult?.Succeeded ?? false) &&
        (this.Model.UserSynchronizeResult?.Succeeded ?? false);
    var navigateBack = succeeded && !string.IsNullOrEmpty(this.Model.ReturnUrl);
}

<div class="row">
    <div class="alert alert-light my-5" role="alert">
        <p><span class="display-2">Welcome</span></p>

        @if (this.Model.Authenticated)
        {
            if (succeeded)
            {
                <p>
                    <span class="h1">You are logged in as <span class="badge bg-primary">@User.Identity?.Name</span></span>
                </p>
                @if (navigateBack)
                {
                    <p><span class="spinner-border spinner-border-sm text-primary" role="status"></span>Navigating in <span class="text-primary" id="timerSpan">@countdownSeconds</span> seconds</p>
                }
            }
            else
            {
                <p>
                    <span class="h1">Failed to login as <span class="badge bg-primary">@User.Identity?.Name</span></span>
                </p>
            }
        }
        else
        {
            <p>
                <span class="h1">You are <span class="badge bg-danger">Not Authenticated</span></span>
            </p>
        }

        <div class="accordion" id="accordionExample">
            <div class="accordion-item">
                <h2 class="accordion-header" id="headingUserInformation">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseUserInformation" aria-expanded="false" aria-controls="collapseUserInformation">
                        User Information
                        @if (this.Model.Authenticated)
                        {
                            <span class="badge bg-primary">Authenticated</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">Not Authenticated</span>
                        }
                    </button>
                </h2>
                <div id="collapseUserInformation" class="accordion-collapse collapse" aria-labelledby="headingUserInformation" data-bs-parent="#accordionExample">
                    <div class="accordion-body">
                        <dl class="row">
                            <dt class="col-sm-3">@nameof(this.User.Identity.IsAuthenticated)</dt>
                            <dd class="col-sm-9">@this.User.Identity?.IsAuthenticated</dd>
                            <dt class="col-sm-3">@nameof(this.User.Identity.Name)</dt>
                            <dd class="col-sm-9">@this.User.Identity?.Name</dd>
                            <dt class="col-sm-3">@nameof(this.User.Identity.AuthenticationType)</dt>
                            <dd class="col-sm-9">@this.User.Identity?.AuthenticationType</dd>
                            <dt class="col-sm-3">@nameof(this.Model.GroupNames)</dt>
                            <dd class="col-sm-9">
                                @foreach (var groupName in this.Model.GroupNames ?? Enumerable.Empty<string>())
                                {
                                    <span class="badge bg-primary">@groupName</span>
                                }
                            </dd>
                            <dt class="col-sm-3">Claims</dt>
                            <dd class="col-sm-9">
                                <dl class="row">
                                    @foreach (var claimGroup in (this.User.Claims ?? Enumerable.Empty<Claim>()).GroupBy(claim => claim.Type))
                                    {
                                        <dt class="col-sm-4">@(Uri.TryCreate(claimGroup.Key, UriKind.Absolute, out var uri) ? uri.Segments.LastOrDefault() : claimGroup.Key)</dt>
                                        <dd class="col-sm-8">
                                            @foreach (var claim in claimGroup)
                                            {
                                                <span class="badge bg-primary">@claim.Value</span>
                                            }
                                        </dd>
                                    }
                                </dl>
                            </dd>
                        </dl>
                    </div>
                </div>
            </div>
            <div class="accordion-item">
                <h2 class="accordion-header" id="headingClientLogin">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseClientLogin" aria-expanded="false" aria-controls="collapseClientLogin">
                        Client Login
                        @if (this.Model.ClientLoginResult?.Succeeded ?? false)
                        {
                            <span class="badge bg-primary">Success</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">Failed</span>
                        }
                    </button>
                </h2>
                <div id="collapseClientLogin" class="accordion-collapse collapse" aria-labelledby="headingClientLogin" data-bs-parent="#accordionExample">
                    <div class="accordion-body">
                        <dl class="row">
                            <dt class="col-sm-3">@nameof(this.Model.ClientLoginResult.Succeeded)</dt>
                            <dd class="col-sm-9">@this.Model.ClientLoginResult?.Succeeded</dd>
                            <dt class="col-sm-3">Errors</dt>
                            <dd class="col-sm-9">
                                <dl class="row">
                                    @foreach (var error in this.Model.ClientLoginResult?.Errors ?? Enumerable.Empty<CommonResultError>())
                                    {
                                        <dt class="col-sm-4">@error.Code</dt>
                                        <dd class="col-sm-8">@error.Message</dd>
                                    }
                                </dl>
                            </dd>
                        </dl>
                    </div>
                </div>
            </div>
            <div class="accordion-item">
                <h2 class="accordion-header" id="headingUserSynchronization">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseUserSynchronization" aria-expanded="false" aria-controls="collapseUserSynchronization">
                        User Synchronization
                        @if (this.Model.UserSynchronizeResult?.Succeeded ?? false)
                        {
                            <span class="badge bg-primary">Success</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">Failed</span>
                        }
                    </button>
                </h2>
                <div id="collapseUserSynchronization" class="accordion-collapse collapse" aria-labelledby="headingUserSynchronization" data-bs-parent="#accordionExample">
                    <div class="accordion-body">
                        <dl class="row">
                            <dt class="col-sm-3">@nameof(this.Model.UserSynchronizeResult.Succeeded)</dt>
                            <dd class="col-sm-9">@this.Model.UserSynchronizeResult?.Succeeded</dd>
                            <dt class="col-sm-3">@nameof(this.Model.UserSynchronizeResult.Entity)</dt>
                            <dd class="col-sm-9">
                                <dl class="row">
                                    <dt class="col-sm-4">@nameof(this.Model.UserSynchronizeResult.Entity.Id)</dt>
                                    <dd class="col-sm-8">@this.Model.UserSynchronizeResult?.Entity?.Id</dd>
                                    <dt class="col-sm-4">@nameof(this.Model.UserSynchronizeResult.Entity.UserName)</dt>
                                    <dd class="col-sm-8">@this.Model.UserSynchronizeResult?.Entity?.UserName</dd>
                                    <dt class="col-sm-4">@nameof(this.Model.TemporaryPassword)</dt>
                                    <dd class="col-sm-8">@this.Model.TemporaryPassword</dd>
                                </dl>
                            </dd>
                            <dt class="col-sm-3">Errors</dt>
                            <dd class="col-sm-9">
                                <dl class="row">
                                    @foreach (var error in this.Model.UserSynchronizeResult?.Errors ?? Enumerable.Empty<CommonResultError>())
                                    {
                                        <dt class="col-sm-4">@error.Code</dt>
                                        <dd class="col-sm-8">@error.Message</dd>
                                    }
                                </dl>
                            </dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>

        <p class="text-end mb-0">@DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")</p>
        <p class="text-end mb-0">@this.Model.ReturnUrl</p>
    </div>
</div>
<div class="d-grid gap-2 d-md-flex justify-content-md-end">
    <button type="button" class="btn btn-light" onclick="navigate()">
        <i class="bi bi-arrow-bar-left"></i> Go Back
    </button>
    <button type="button" class="btn btn-secondary" onclick="refresh()">
        <i class="bi bi-arrow-clockwise"></i> Refresh
    </button>
</div>

@section Scripts {
    <script>
        var returnUrl = "@this.Model.ReturnUrl";
        var timerSpan = $('#timerSpan');
        var navigateBack = @navigateBack.ToString().ToLower();
        var countdownSeconds = @countdownSeconds;

        function navigate() {
            window.location.href = returnUrl;
        }

        function refresh() {
            window.location.reload();
        }

        function countdown() {
            timerSpan.html(countdownSeconds);
            if (countdownSeconds > 0) {
                countdownSeconds--;
                setTimeout(countdown, 1000);
            }
            else {
                window.location.href = returnUrl;
            }
        }

        if (navigateBack) {
            countdown();
        }
    </script>
}
