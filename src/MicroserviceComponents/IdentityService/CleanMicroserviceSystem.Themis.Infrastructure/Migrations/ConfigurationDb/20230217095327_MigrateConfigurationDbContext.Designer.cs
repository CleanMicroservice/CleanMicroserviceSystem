// <auto-generated />
using System;
using CleanMicroserviceSystem.Themis.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanMicroserviceSystem.Themis.Infrastructure.Migrations.ConfigurationDb
{
    [DbContext(typeof(ConfigurationDbContext))]
    [Migration("20230217095327_MigrateConfigurationDbContext")]
    partial class MigrateConfigurationDbContext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("CleanMicroserviceSystem.Themis.Domain.Entities.Configuration.ApiResource", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ApiResources");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 2, 17, 9, 53, 27, 593, DateTimeKind.Utc).AddTicks(8749),
                            Description = "ThemisAPI",
                            Enabled = true,
                            Name = "ThemisAPI"
                        });
                });

            modelBuilder.Entity("CleanMicroserviceSystem.Themis.Domain.Entities.Configuration.ApiScope", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApiResourceID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("ID");

                    b.HasIndex("ApiResourceID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ApiScopes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ApiResourceID = 1,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 2, 17, 9, 53, 27, 593, DateTimeKind.Utc).AddTicks(8819),
                            Description = "ThemisAPI.Read",
                            Enabled = true,
                            Name = "ThemisAPI.Read"
                        },
                        new
                        {
                            ID = 2,
                            ApiResourceID = 1,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 2, 17, 9, 53, 27, 593, DateTimeKind.Utc).AddTicks(8821),
                            Description = "ThemisAPI.Write",
                            Enabled = true,
                            Name = "ThemisAPI.Write"
                        });
                });

            modelBuilder.Entity("CleanMicroserviceSystem.Themis.Domain.Entities.Configuration.Client", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("Secret")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 2, 17, 9, 53, 27, 593, DateTimeKind.Utc).AddTicks(8829),
                            Description = "Tethys",
                            Enabled = true,
                            Name = "Tethys",
                            Secret = "dZ4LIKrWTu4W+XlkYYEamdddV4MrXnxZpjPUQClKn+8="
                        });
                });

            modelBuilder.Entity("CleanMicroserviceSystem.Themis.Domain.Entities.Configuration.ClientApiScopeMap", b =>
                {
                    b.Property<int>("ClientID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApiScopeID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ClientID", "ApiScopeID");

                    b.HasIndex("ApiScopeID");

                    b.ToTable("ClientApiScopeMaps");

                    b.HasData(
                        new
                        {
                            ClientID = 1,
                            ApiScopeID = 1,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 2, 17, 9, 53, 27, 593, DateTimeKind.Utc).AddTicks(9146)
                        },
                        new
                        {
                            ClientID = 1,
                            ApiScopeID = 2,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 2, 17, 9, 53, 27, 593, DateTimeKind.Utc).AddTicks(9147)
                        });
                });

            modelBuilder.Entity("CleanMicroserviceSystem.Themis.Domain.Entities.Configuration.ApiScope", b =>
                {
                    b.HasOne("CleanMicroserviceSystem.Themis.Domain.Entities.Configuration.ApiResource", "ApiResource")
                        .WithMany("ApiScopes")
                        .HasForeignKey("ApiResourceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("CleanMicroserviceSystem.Themis.Domain.Entities.Configuration.ClientApiScopeMap", b =>
                {
                    b.HasOne("CleanMicroserviceSystem.Themis.Domain.Entities.Configuration.ApiScope", "ApiScope")
                        .WithMany("ClientMaps")
                        .HasForeignKey("ApiScopeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanMicroserviceSystem.Themis.Domain.Entities.Configuration.Client", "Client")
                        .WithMany("ApiScopesMaps")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiScope");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CleanMicroserviceSystem.Themis.Domain.Entities.Configuration.ApiResource", b =>
                {
                    b.Navigation("ApiScopes");
                });

            modelBuilder.Entity("CleanMicroserviceSystem.Themis.Domain.Entities.Configuration.ApiScope", b =>
                {
                    b.Navigation("ClientMaps");
                });

            modelBuilder.Entity("CleanMicroserviceSystem.Themis.Domain.Entities.Configuration.Client", b =>
                {
                    b.Navigation("ApiScopesMaps");
                });
#pragma warning restore 612, 618
        }
    }
}
