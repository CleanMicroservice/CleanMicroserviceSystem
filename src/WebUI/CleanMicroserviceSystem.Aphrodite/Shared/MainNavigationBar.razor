@inject NavigationManager navigationManager

<MNavigationDrawer Value="@this.navigationVisible"
                   Class="navigation rounded-r-xl"
                   Width=NavigationWidth MiniVariantWidth=NavigationMinWidth
                   ExpandOnHover="navigationExpandOnHover" MiniVariant="navigationMini"
                          Fixed App Permanent Floating>
    <MRow Justify="@JustifyTypes.Center" NoGutters Class="mt-10 mb-5">
         <MSpacer></MSpacer>
         <MCol Align=@("center")>
             <MImage Src="/img/Logo.png"
                     MinWidth=LogoMinSize MaxWidth=LogoMaxSize MinHeight=LogoMinSize MaxHeight=LogoMaxSize
             @onclick="()=>navigationManager.NavigateTo(RouterContract.DefaultUri)" />
         </MCol>
         <MSpacer></MSpacer>
     </MRow>

     @if (!navigationMini)
    {
        <MRow Justify="@JustifyTypes.Center" NoGutters>
         <MSpacer></MSpacer>
         <MCol Align=@("center")>
             <p class="text-h5 font-weight-black text-no-wrap primary--text mb-5">Aphrodite</p>
         </MCol>
         <MSpacer></MSpacer>
     </MRow>
    }

    <MList Routable Nav Dense Rounded>
        <NavigatorItem Icon="mdi-home" Title="Home" TargetUri="@RouterContract.DefaultUri" />
        <PermissionNavigator />
        <NuGetServerNavigator />
    </MList>
</MNavigationDrawer>

<MButton Small Fab Color="primary" Elevation="0" OnClick=@this.SwitchNavigation Style="@($"bottom:{ExpandButtonBottom}px;z-index:7;position:fixed;left:{expandButtonLeft}px;")">
     <MIcon Class="white--text">
         @(navigationVisible is false || navigationMini ? "mdi-chevron-right" : "mdi-chevron-left")
    </MIcon>
</MButton>

@code
{
    private const int NavigationWidth = 280;
    private const int NavigationMinWidth = 80;
    private const int LogoMinSize = 48;
    private const int LogoMaxSize = 128;
    private const int ExpandButtonBottom = 60;
    private const int ExpandButtonOffset = -20;
    private int expandButtonLeft => !navigationVisible ? ExpandButtonOffset : navigationMini ?
        NavigationMinWidth + ExpandButtonOffset : NavigationWidth + ExpandButtonOffset;
    private bool navigationExpandOnHover { get; set; } = false;
    private bool navigationMini { get; set; } = false;
    private bool navigationVisible { get; set; } = true;

    private void SwitchNavigation()
    {
        if (navigationVisible)
        {
            navigationMini = !navigationMini;
            navigationExpandOnHover = navigationMini;
        }
        else
        {
            navigationVisible = true;
        }
    }
}
