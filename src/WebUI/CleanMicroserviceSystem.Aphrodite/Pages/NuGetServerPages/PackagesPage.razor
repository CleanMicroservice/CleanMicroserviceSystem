@page "/nugetserver/packages"
@using CleanMicroserviceSystem.Astra.Contract.NuGetPackages;
@* @attribute [Authorize(Policy = IdentityContract.AstraAPIReadPolicyName)] *@
@inherits AphroditePageBase
@inject ILogger<PackagesPage> logger
@inject IPopupService popupService
@inject AstraNuGetPackageClient astraNuGetPackageClient

<PageTitle>Packages</PageTitle>

<MCard Flat Rounded=@("xl")>
    <MCardText Class="pa-6">
        <PPageHeader Title="Packages" Subtitle=@($"{this.SearchResponse.TotalHits} packages in total.") OnSearch=this.LoadPackages ShowFiltersByDefault>
            <LeftActions>
                <MButton Rounded Color="primary"><MIcon Left>mdi-plus</MIcon>Create</MButton>
            </LeftActions>
            <Filters>
                <MRow>
                    <MCol Cols="12">
                        <MTextField Label="Keyword" @bind-Value="@this.Keyword"
                                    Color="primary" HideDetails=@("auto")
                                    Clearable Filled Rounded Dense>
                        </MTextField>
                    </MCol>
                </MRow>
            </Filters>
        </PPageHeader>
    </MCardText>
</MCard>

<MCard Flat Rounded=@("xl") Class="mt-6" Loading=@this.LoadingPackages>
    <MCardText>
        @if (this.SearchResponse.Data?.Any() ?? false)
        {
            @foreach (var package in this.SearchResponse.Data)
            {
                <p>@package.PackageId</p>
                <p>@package.Title</p>
                <p>@package.Version</p>
                <p>@string.Join(", ", package.Authors??Enumerable.Empty<string>())</p>
                <p>@string.Join(", ", package.Versions?.Select(x=>x.Version)??Enumerable.Empty<string>())</p>
                <p>@string.Join(", ", package.PackageTypes?.Select(x=>x.Name)??Enumerable.Empty<string>())</p>
                <p>@string.Join(", ", package.Tags??Enumerable.Empty<string>())</p>
                <p>@package.Summary</p>
                <p>@package.Description</p>
                <p>@package.ProjectUrl</p>
                <p>@package.IconUrl</p>
                <p>@package.LicenseUrl</p>
                <p>@package.RegistrationIndexUrl</p>
                <p>@package.TotalDownloads</p>
                <hr />
            }
        }
    </MCardText>
</MCard>

@code {
    protected StringBoolean LoadingPackages { get; set; }
    protected IList<RoleInformationResponse>? Roles { get; set; }
    protected string? Keyword { get; set; }
    protected string? LocalSearchKeyword { get; set; }
    protected SearchResponse SearchResponse { get; set; } = SearchResponse.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await this.LoadPackages();
    }

    protected async Task LoadPackages()
    {
        try
        {
            this.LoadingPackages = true;
            this.SearchResponse = await this.astraNuGetPackageClient.SearchAsync(this.Keyword);
        }
        catch (Exception ex)
        {
            await this.popupService.EnqueueSnackbarAsync(ex);
        }
        finally
        {
            this.LoadingPackages = false;
        }
    }
}
