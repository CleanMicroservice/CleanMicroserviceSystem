@page "/nugetserver/packages"
@using CleanMicroserviceSystem.Astra.Contract.NuGetPackages;
@* @attribute [Authorize(Policy = IdentityContract.AstraAPIReadPolicyName)] *@
@inherits AphroditePageBase
@inject ILogger<PackagesPage> logger
@inject IPopupService popupService
@inject IOptions<NuGetServerConfiguration> nuGetServerOptions
@inject AstraNuGetPackageClient astraNuGetPackageClient

<PageTitle>Packages</PageTitle>

<MCard Flat Rounded=@("xl")>
    <MCardText Class="pa-6">
        <PPageHeader Title="Packages" Subtitle=@($"{this.SearchResponse.TotalHits} packages in total.") OnSearch=this.LoadPackages ShowFiltersByDefault>
            <LeftActions>
                <AuthorizeView Policy="@IdentityContract.AstraAPIWritePolicyName">
                    <MButton Rounded Color="primary" OnClick=@this.OnUploadPackage><MIcon Left>mdi-plus</MIcon>Create</MButton>
                </AuthorizeView>
            </LeftActions>
            <Filters>
                <MRow>
                    <MCol Cols="12">
                        <MTextField Label="Keyword" @bind-Value="@this.Keyword"
                                    Color="primary" HideDetails=@("auto")
                                        Clearable Filled Rounded Dense>
                        </MTextField>
                    </MCol>
                </MRow>
            </Filters>
        </PPageHeader>
    </MCardText>
</MCard>

<MContainer Fluid Class="mt-6 pa-0">
    <MRow Dense>
        @if (this.LoadingPackages)
        {
            <MProgressLinear Indeterminate Color="primary" Rounded></MProgressLinear>
        }
        else
        {
            @foreach (var package in this.SearchResponse?.Data?.Reverse() ?? Enumerable.Empty<SearchResult>())
            {
                <MCol Class="pa-0" key="@package.PackageId" Cols=12>
                    <MCard Flat Rounded=@("xl") Class="my-2">
                        <MCardTitle>
                            <MRow>
                                <MCol Cols=@("auto")><span class="font-weight-black h6 text-no-wrap text-truncate">@package.PackageId</span></MCol>
                                <MCol><span class="subtitle-1 text-truncate text--disabled">@string.Join(", ", package.Authors??Enumerable.Empty<string>())</span></MCol>
                                <MCol Cols=@("auto")>
                                    <MChip Color="primary" Outlined TextColor="white">@package.Version</MChip>
                                </MCol>
                            </MRow>
                        </MCardTitle>
                        <MCardSubtitle>
                            <AuthorizeView Policy=@IdentityContract.AstraAPIWritePolicyName>
                                <Authorized>
                                    @foreach (var version in package.Versions?.Select(version => version.Version) ?? Enumerable.Empty<string>())
                                    {
                                        <MChip Class="ma-1" Color="primary" TextColor="white" Outlined Small
                                              Close OnCloseClick="()=>this.OnDeletePackageVersion(package, version)">
                                            @version
                                        </MChip>
                                    }
                                </Authorized>
                                <NotAuthorized>
                                    @foreach (var version in package.Versions?.Select(version => version.Version) ?? Enumerable.Empty<string>())
                                    {
                                        <MChip Class="ma-1" Color="primary" TextColor="white" Outlined Small>@version</MChip>
                                    }
                                </NotAuthorized>
                            </AuthorizeView>
                        </MCardSubtitle>
                        <MCardText>
                            @package.Description
                            <MExpansionPanels Flat>
                            <MExpansionPanel>
                                <MExpansionPanelHeader Class="pa-0">Learn more</MExpansionPanelHeader>
                                <MExpansionPanelContent>
                                    <MRow>
                                        @if (package.Tags?.Any() ?? false)
                                            {
                                                <MCol Cols=12 Class="pa-1">
                                                    @foreach (var tag in package.Tags)
                                                    {
                                                        <MChip Class="ma-1" Label Color="secondary" XSmall>@tag</MChip>
                                                    }
                                                </MCol>
                                            }
                                            <MCol Cols=12 Class="pa-1"><span class="text-no-wrap text-truncate">@nameof(@package.IconUrl): @package.IconUrl</span></MCol>
                                            <MCol Cols=12 Class="pa-1"><span class="text-no-wrap text-truncate">@nameof(@package.LicenseUrl): @package.LicenseUrl</span></MCol>
                                            <MCol Cols=12 Class="pa-1"><span class="text-no-wrap text-truncate">@nameof(@package.ProjectUrl): @package.ProjectUrl</span></MCol>
                                            <MCol Cols=12 Class="pa-1"><span class="text-no-wrap text-truncate">@nameof(@package.RegistrationIndexUrl): @package.RegistrationIndexUrl</span></MCol>
                                        </MRow>
                                    </MExpansionPanelContent>
                                </MExpansionPanel>
                            </MExpansionPanels>
                        </MCardText>
                    </MCard>
                </MCol>
            }
        }
    </MRow>
</MContainer>

@code {
    protected bool LoadingPackages { get; set; }
    protected IList<RoleInformationResponse>? Roles { get; set; }
    protected string? Keyword { get; set; }
    protected string? LocalSearchKeyword { get; set; }
    protected SearchResponse SearchResponse { get; set; } = SearchResponse.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await this.LoadPackages();
    }

    protected async Task LoadPackages()
    {
        try
        {
            this.LoadingPackages = true;
            this.SearchResponse = await this.astraNuGetPackageClient.SearchAsync(this.Keyword);
        }
        catch (Exception ex)
        {
            await this.popupService.EnqueueSnackbarAsync(ex);
        }
        finally
        {
            this.LoadingPackages = false;
        }
    }

    protected async Task OnUploadPackage()
    {
        // TODO: Upload package;
    }

    protected async Task OnDeletePackageVersion(SearchResult package, string version)
    {
        try
        {
            var confirmed = await this.popupService.ConfirmAsync("Confirm", $"Are you sure to delete package: {package.PackageId}, version: {version} ?", AlertTypes.Warning);
            if (!confirmed) return;

            var response = await this.astraNuGetPackageClient.DeleteAsync(
                this.nuGetServerOptions.Value.ApiKey, package.PackageId, version);
            response.EnsureSuccessStatusCode();
            package.Versions = package.Versions
                .Where(vers => !vers.Version.Equals(version, StringComparison.OrdinalIgnoreCase))
                .ToList()
                .AsReadOnly();
            await this.popupService.EnqueueSnackbarAsync($"Package {package.PackageId} version {version} deleted.", AlertTypes.Success);
        }
        catch (Exception ex)
        {
            await this.popupService.EnqueueSnackbarAsync(ex);
        }
    }
}
