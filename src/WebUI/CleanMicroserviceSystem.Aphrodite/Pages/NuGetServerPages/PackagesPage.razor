@page "/nugetserver/packages"
@using CleanMicroserviceSystem.Astra.Contract.NuGetPackages;
@* @attribute [Authorize(Policy = IdentityContract.AstraAPIReadPolicyName)] *@
@inherits AphroditePageBase
@inject ILogger<PackagesPage> logger
@inject IPopupService popupService
@inject AstraNuGetPackageClient astraNuGetPackageClient

<PageTitle>Packages</PageTitle>

<MCard Flat Rounded=@("xl")>
    <MCardText Class="pa-6">
        <PPageHeader Title="Packages" Subtitle=@($"{this.SearchResponse.TotalHits} packages in total.") OnSearch=this.LoadPackages ShowFiltersByDefault>
            <LeftActions>
                <MButton Rounded Color="primary"><MIcon Left>mdi-plus</MIcon>Create</MButton>
            </LeftActions>
            <Filters>
                <MRow>
                    <MCol Cols="12">
                        <MTextField Label="Keyword" @bind-Value="@this.Keyword"
                                    Color="primary" HideDetails=@("auto")
                                        Clearable Filled Rounded Dense>
                        </MTextField>
                    </MCol>
                </MRow>
            </Filters>
        </PPageHeader>
    </MCardText>
</MCard>

<MContainer Fluid Class="mt-6 pa-0">
    <MRow Dense>
        @if (this.LoadingPackages)
        {
            <MProgressLinear Indeterminate Color="primary" Rounded></MProgressLinear>
        }
        else
        {
            @foreach (var package in this.SearchResponse?.Data?.Reverse() ?? Enumerable.Empty<SearchResult>())
            {
                <MCol Class="pa-0" key="@package.PackageId" Cols=12>
                    <MCard Flat Rounded=@("xl") Class="my-2">
                        <MCardTitle>
                            <MRow>
                                <MCol Cols=@("auto")><p class="h6 text-no-wrap">@package.PackageId</p></MCol>
                                <MSpacer></MSpacer>
                                <MCol Cols=@("auto")>
                                    <MChip Color="primary" Outlined TextColor="white">@package.Version</MChip>
                                </MCol>
                            </MRow>
                        </MCardTitle>
                        <MCardSubtitle>@string.Join(", ", package.Authors??Enumerable.Empty<string>())</MCardSubtitle>
                        <MCardText>
                            @foreach (var version in package.Versions?.Select(version => version.Version) ?? Enumerable.Empty<string>())
                            {
                                <MChip Class="ma-1" Color="secondary" Small TextColor="white">@version</MChip>
                            }
                            <MDivider></MDivider>
                            @package.Description
                            @foreach (var tag in package.Tags ?? Enumerable.Empty<string>())
                            {
                                <MChip Class="ma-1" Color="primary" XSmall>@tag</MChip>
                            }
                        </MCardText>
                    </MCard>
                </MCol>
            }
        }
    </MRow>
</MContainer>

@code {
    protected bool LoadingPackages { get; set; }
    protected IList<RoleInformationResponse>? Roles { get; set; }
    protected string? Keyword { get; set; }
    protected string? LocalSearchKeyword { get; set; }
    protected SearchResponse SearchResponse { get; set; } = SearchResponse.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await this.LoadPackages();
    }

    protected async Task LoadPackages()
    {
        try
        {
            this.LoadingPackages = true;
            this.SearchResponse = await this.astraNuGetPackageClient.SearchAsync(this.Keyword);
        }
        catch (Exception ex)
        {
            await this.popupService.EnqueueSnackbarAsync(ex);
        }
        finally
        {
            this.LoadingPackages = false;
        }
    }
}
