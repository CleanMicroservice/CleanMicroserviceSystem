@page "/account/profile"
@attribute [Authorize()]
@inherits AphroditePageBase
@inject ILogger<ProfilePage> logger

<PageTitle>Profile</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (!string.IsNullOrEmpty(Message))
        {
            <MAlert Border="Borders.Bottom" Type="AlertTypes.Error" Shaped>
                @Message
            </MAlert>
        }
        <MRow>
            <MCol Cols="@("Auto")">
                @if (this.CardLoading == true)
                {
                    <MSheet Color="grey lighten-4">
                        <MSkeletonLoader Class="mx-auto" MaxWidth="300" Type="card"></MSkeletonLoader>
                    </MSheet>
                }
                else
                {
                    <MCard Flat Rounded="@("xl")" Loading=CardLoading>
                        <MCardText>
                            <MRow>
                                <MCol Cols="@("Auto")" Class="text-center">
                                    <MAvatar Size="64" Class="mb-3">
                                        <MImage Src="/img/Avatar.png"></MImage>
                                    </MAvatar>
                                    <p class="text-h5">@(this.UserInformation?.UserName ?? "-")</p>
                                    <p class="text-h5">@(context?.User?.Identity?.Name ?? "-")</p>
                                </MCol>
                                <MDivider Vertical />
                                <MCol>
                                </MCol>
                            </MRow>
                        </MCardText>
                    </MCard>
                }
            </MCol>
            <MSpacer></MSpacer>
            <MCol></MCol>
        </MRow>
    </Authorized>
</AuthorizeView>

@code {
    protected string Message { get; set; }
    private StringBoolean CardLoading { get; set; }
    protected UserInformationResponse? UserInformation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.logger.LogInformation($"Getting user information...");
        this.CardLoading = true;
        try
        {
            var httpClient = this.HttpClientFactory.CreateClient(ApiContract.GatewayHttpClientName);
            var userUri = $"{ApiContract.GatewayUriPrefix}/{ApiContract.ThemisServiceName}/api/User";
            this.UserInformation = await httpClient.GetFromJsonAsync<UserInformationResponse>(userUri);
            await Task.Delay(1000);
            if (this.UserInformation is null)
            {
                this.logger.LogWarning($"Get null user information.");
                this.Message = "Can not get current user information.";
            }
            else
            {
                this.logger.LogInformation($"Get user information [{this.UserInformation.UserName}] successfully.");
            }
        }
        catch (Exception ex)
        {
            this.logger.LogError(ex, $"Get user information failed.");
            this.Message = ex.Message;
        }
        finally
        {
            this.CardLoading = false;
        }

        await base.OnInitializedAsync();
    }
}
