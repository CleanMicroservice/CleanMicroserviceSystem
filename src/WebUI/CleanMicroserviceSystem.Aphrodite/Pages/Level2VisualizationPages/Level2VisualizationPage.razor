@page "/level2visualization"
@inherits AphroditePageBase
@inject ILogger<Level2VisualizationPage> logger
@inject IPopupService popupService

<PageTitle>Level2 Visualization</PageTitle>

<MCard Flat Rounded=@("xl")>
     <MCardText Class="pa-6">
         <PPageHeader Title="Level2 Visualization" Subtitle=@($"Select market file.") ShowFiltersByDefault>
            <LeftActions>
                <MButton Rounded Color="primary" OnClick=@this.OnShowSelectFileModal>
                     <MIcon Left>mdi-plus</MIcon>Select
                </MButton>
                <PModal @bind-Value=@this.ShowSelectFileModal
                        Title=@("Select market file.") Persistent MaxWidth="600"
                         OnSave="this.OnSelectFileModalSave"
                         OnCancel="this.OnSelectFileModalCancel">
                     <ChildContent>
                         <MFileInput TValue="List<IBrowserFile>" @bind-Value=this.MarketFiles
                                            Chips Clearable Color="primary" Counter=true ShowSize
                                     Label="Select market file ...">
                         </MFileInput>
                     </ChildContent>
                 </PModal>
             </LeftActions>
         </PPageHeader>
     </MCardText>
 </MCard>

 <MContainer Fluid Class="mt-6 pa-0">
     <MRow Dense>
        @if (this.LoadingFiles)
        {
        <MProgressLinear Indeterminate Color="primary" Rounded></MProgressLinear>
        }
        else
        {
        <MButton OnClick="()=>this.Counter++"></MButton>
            <p class="font-weight-black">
                TODO: Implement charts. @this.Counter
            </p>
        }
    </MRow>
</MContainer>

@code {
    protected bool LoadingFiles { get; set; }
    protected bool ShowSelectFileModal { get; set; } = false;
    protected List<IBrowserFile> MarketFiles { get; set; } = default!;
    private int Counter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected Task OnShowSelectFileModal()
    {
        this.ShowSelectFileModal = true;
        return Task.CompletedTask;
    }

    protected async Task OnSelectFileModalSave()
    {
        var marketFile = this.MarketFiles?.FirstOrDefault();
        if (marketFile is null)
        {
            await this.popupService.EnqueueSnackbarAsync($"Please select a market file", AlertTypes.Warning);
            return;
        }
        try
        {
            using var stream = marketFile.OpenReadStream();
            using var reader = new StreamReader(stream);

            await this.popupService.EnqueueSnackbarAsync($"Market file loaded.", AlertTypes.Success);
        }
        catch (Exception ex)
        {
            await this.popupService.EnqueueSnackbarAsync(ex.Message, AlertTypes.Error);
        }
        this.ShowSelectFileModal = false;
        this.MarketFiles = default;
    }

    protected async Task OnSelectFileModalCancel()
    {
        this.ShowSelectFileModal = false;
        this.MarketFiles = default;
        await Task.CompletedTask;
    }
}
