@page "/permission/users"
@attribute [Authorize(Policy = IdentityContract.ThemisAPIReadPolicyName)]
@inherits AphroditePageBase
@inject ILogger<UsersPage> logger
@inject IPopupService popupService
@inject ThemisUserClient themisUserClient

<PageTitle>Users</PageTitle>

<MCard Flat Rounded=@("xl")>
    <MCardText Class="pa-6">
        <PPageHeader Title="Users" Subtitle=@($"{this.Users.Count()} users in total.") OnSearch=this.LoadUsers ShowFiltersByDefault>
            <LeftActions>
                <AuthorizeView Context="authorizeContext" Policy="@IdentityContract.ThemisAPIWritePolicyName">
                    <MButton Color="primary" Rounded Depressed
                             OnClick="this.OnShowCreateUserModal">
                        <MIcon Left>mdi-plus</MIcon>Create
                    </MButton>
                    <PModal @bind-Value=@this.ShowCreateUserModal
                            Title="Create User" Persistent MaxWidth="600"
                            OnSave="this.OnCreateUserModalSave"
                            OnCancel="this.OnCreateUserModelCancel">
                        <ChildContent>
                            <CreateUserComponent UserRegisterRequest=@this.UserRegisterRequest />
                        </ChildContent>
                    </PModal>
                </AuthorizeView>
            </LeftActions>
            <Filters>
                <MRow>
                    <MCol Sm=12 Md=3>
                        <MTextField Label="Id" @bind-Value="@this.Id" Type="number" TValue="int?"
                                    Color="primary" HideDetails=@("auto")
                                        Clearable Filled Rounded Dense>
                        </MTextField>
                    </MCol>
                    <MCol Sm=12 Md=3>
                        <MTextField Label="Name" @bind-Value="@this.UserName"
                                    Color="primary" HideDetails=@("auto")
                                        Clearable Filled Rounded Dense>
                        </MTextField>
                    </MCol>
                    <MCol Sm=12 Md=3>
                        <MTextField Label="Email" @bind-Value="@this.Email"
                                    Color="primary" HideDetails=@("auto")
                                        Clearable Filled Rounded Dense>
                        </MTextField>
                    </MCol>
                    <MCol Sm=12 Md=3>
                        <MTextField Label="Phone" @bind-Value="@this.PhoneNumber"
                                    Color="primary" HideDetails=@("auto")
                                        Clearable Filled Rounded Dense>
                        </MTextField>
                    </MCol>
                </MRow>
            </Filters>
        </PPageHeader>
    </MCardText>
</MCard>

<MCard Flat Rounded=@("xl") Class="mt-6">
    <MCardText>
        <MRow>
            <MSpacer></MSpacer>
            <MCol Cols=@("auto")>
                <MTextField Style="width:280px;" Color="primary" BackgroundColor="grey lighten-4"
                            HideDetails=@("auto") @bind-Value="@this.LocalSearchKeyword" Placeholder="Search" Clearable Rounded Flat Dense Solo>
                    <PrependInnerContent>
                        <MIcon Class="neutral-lighten-1--text">mdi-magnify</MIcon>
                    </PrependInnerContent>
                </MTextField>
            </MCol>
        </MRow>
        <MDataTable Headers="@this.UserHeaders" Search="@this.LocalSearchKeyword" Class="my-3"
                    Items="@this.Users" Page=@this.CurrentPageIndex ItemKey="item=>item.Id.ToString()"
                    TItem="UserInformationResponse" ItemsPerPage=@this.CurrentPageSize
                    Loading=@this.LoadingUsers LoadingText="Loading ..."
                    MultiSort FixedHeader HideDefaultFooter>
            <ItemColContent>
                @switch (context.Header.Value)
                {
                    case nameof(UserInformationResponse.Enabled):
                        <AuthorizeView Context="authorizeContext" Policy="@IdentityContract.ThemisAPIWritePolicyName">
                            <Authorized>
                                <MButton Icon Color="@(context.Item.Enabled?"success":"warning")" OnClick="()=>this.OnToggleUserEnable(context.Item)">
                                    <MIcon>@(context.Item.Enabled ? "mdi-check-bold" : "mdi-close-thick")</MIcon>
                                    </MButton>
                                </Authorized>
                                <NotAuthorized>
                                    <MIcon Color="@(context.Item.Enabled?"success":"warning")">@(context.Item.Enabled ? "mdi-check-bold" : "mdi-close-thick")</MIcon>
                                </NotAuthorized>
                            </AuthorizeView>
                        break;
                    case ActionsHeaderName:
                        <AuthorizeView Context="authorizeContext" Policy="@IdentityContract.ThemisAPIWritePolicyName">
                            <MMenu Right Bottom Rounded=@("xl")>
                                <ActivatorContent Context="menuContext">
                                    <MButton Color="primary" Icon @attributes="@menuContext.Attrs">
                                        <MIcon>mdi-dots-horizontal</MIcon>
                                    </MButton>
                                </ActivatorContent>
                                <ChildContent>
                                    <MList Dense>
                                    <MListItem Color="primary" Href=@($"{RouterContract.UsersEditUri}/{context.Item.Id}")>
                                        <MListItemIcon>
                                            <MIcon Color="primary">mdi-square-edit-outline</MIcon>
                                        </MListItemIcon>
                                        <MListItemContent>
                                            <MListItemTitle>Edit</MListItemTitle>
                                        </MListItemContent>
                                    </MListItem>
                                    <MListItem Color="warning" OnClick="()=>this.OnResetUserPassword(context.Item)">
                                        <MListItemIcon>
                                            <MIcon Color="warning">mdi-lock-reset</MIcon>
                                        </MListItemIcon>
                                        <MListItemContent>
                                            <MListItemTitle>Reset Password</MListItemTitle>
                                        </MListItemContent>
                                    </MListItem>
                                    <MListItem Color="error" OnClick="()=>this.OnDeleteUser(context.Item)">
                                        <MListItemIcon>
                                            <MIcon Color="error">mdi-trash-can-outline</MIcon>
                                        </MListItemIcon>
                                        <MListItemContent>
                                            <MListItemTitle>Delete</MListItemTitle>
                                        </MListItemContent>
                                    </MListItem>
                                </MList>
                            </ChildContent>
                        </MMenu>
                    </AuthorizeView>
                        break;
                    default:
                        @context.Value
                        break;
                }
            </ItemColContent>
        </MDataTable>
        <MRow>
            <MCol>
                <MSelect @bind-Value=@this.CurrentPageSize Items=@this.ValidPageSizes
                         ItemText=@(size => size.ToString()) ItemValue=@(size=>size)
                         Color="primary" Style="max-width:120px;"
                         Filled Rounded Dense HideDetails=@("auto")>
                </MSelect>
            </MCol>
            <MSpacer></MSpacer>
            <MCol>
                <MPagination @bind-Value=@this.CurrentPageIndex Color="primary" Circle Length=@this.TotalPageCount></MPagination>
            </MCol>
        </MRow>
    </MCardText>
</MCard>

@code {
    protected bool LoadingUsers { get; set; }
    protected bool ShowCreateUserModal { get; set; }
    protected IList<RoleInformationResponse>? Roles { get; set; }
    protected int? Id { get; set; }
    protected string? Role { get; set; }
    protected string? UserName { get; set; }
    protected string? Email { get; set; }
    protected string? PhoneNumber { get; set; }
    protected string? LocalSearchKeyword { get; set; }
    protected List<int> ValidPageSizes = new List<int>() { 10, 20, 50, 100, 200 };
    protected int CurrentPageSize { get; set; } = 20;
    protected int CurrentPageIndex { get; set; } = 1;
    protected int TotalPageCount => (int)Math.Ceiling(this.Users.Count() / (double)CurrentPageSize);
    protected List<UserInformationResponse> Users { get; set; } = new List<UserInformationResponse>();
    protected UserRegisterRequest UserRegisterRequest { get; set; }
    protected const string ActionsHeaderName = "Actions";
    protected readonly List<DataTableHeader<UserInformationResponse>> UserHeaders = new()
    {
        new() { Value = nameof(UserInformationResponse.Id), Text=nameof(UserInformationResponse.Id), Filterable = true, Sortable = true },
        new() { Value = nameof(UserInformationResponse.UserName), Text=nameof(UserInformationResponse.UserName), Filterable = true, Sortable = true },
        new() { Value = nameof(UserInformationResponse.Email), Text=nameof(UserInformationResponse.Email), Filterable = true, Sortable = true },
        new() { Value = nameof(UserInformationResponse.PhoneNumber), Text=nameof(UserInformationResponse.PhoneNumber), Filterable = true, Sortable = true },
        new() { Value = nameof(UserInformationResponse.Enabled), Text=nameof(UserInformationResponse.Enabled), Filterable = true, Sortable = true, Align = DataTableHeaderAlign.Center, Groupable = true },
        new() { Value = ActionsHeaderName, Text=ActionsHeaderName, Filterable = false, Sortable = false, Align = DataTableHeaderAlign.Center },
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await this.LoadUsers();
    }

    protected async Task LoadUsers()
    {
        try
        {
            this.LoadingUsers = true;
            var userSearch = new UserSearchRequest()
                {
                    Id = this.Id,
                    UserName = this.UserName,
                    Email = this.Email,
                    PhoneNumber = this.PhoneNumber,
                };
            var userResult = await this.themisUserClient.SearchUsersAsync(userSearch);
            this.Users.Clear();
            this.Users.AddRange(userResult?.Values ?? Enumerable.Empty<UserInformationResponse>());
            await this.popupService.EnqueueSnackbarAsync($"Loaded {this.Users.Count()} users in total.", AlertTypes.Success);
        }
        catch (Exception ex)
        {
            await this.popupService.EnqueueSnackbarAsync(ex);
        }
        finally
        {
            this.LoadingUsers = false;
        }
    }

    protected async Task OnToggleUserEnable(UserInformationResponse user)
    {
        try
        {
            var confirmed = await this.popupService.ConfirmAsync("Confirm", $"Are you sure to toggle enable of: {user.UserName} ?", AlertTypes.Warning);
            if (!confirmed) return;

            var newStatus = !user.Enabled;
            var commonResult = await this.themisUserClient.UpdateUserAsync(user.Id, new UserUpdateRequest() { Enabled = newStatus });
            if (commonResult?.Succeeded ?? false)
            {
                user.Enabled = newStatus;
                await this.popupService.EnqueueSnackbarAsync($"Toggled user [{user.UserName}] status to be {user.Enabled.ToStatus()}", AlertTypes.Success);
            }
            else
            {
                await this.popupService.EnqueueSnackbarAsync($"Toggle user {user.UserName} status failed: {commonResult?.ToString()}", AlertTypes.Warning);
            }
        }
        catch (Exception ex)
        {
            await this.popupService.EnqueueSnackbarAsync(ex);
        }
    }

    protected async Task<bool> OnDeleteUser(UserInformationResponse user)
    {
        try
        {
            var confirmed = await this.popupService.ConfirmAsync("Confirm", $"Are you sure to delete user: {user.UserName} ?", AlertTypes.Warning);
            if (!confirmed) return false;

            var commonResult = await this.themisUserClient.DeleteUserAsync(user.Id);
            if (commonResult?.Succeeded ?? false)
            {
                this.Users.Remove(user);
                await this.popupService.EnqueueSnackbarAsync($"User {user.UserName} deleted.", AlertTypes.Success);
                return true;
            }
            else
            {
                await this.popupService.EnqueueSnackbarAsync($"User {user.UserName} delete failed: {commonResult?.ToString()}", AlertTypes.Warning);
                return false;
            }
        }
        catch (Exception ex)
        {
            await this.popupService.EnqueueSnackbarAsync(ex);
            return false;
        }
    }

    protected async Task OnResetUserPassword(UserInformationResponse user)
    {
        try
        {
            var confirmed = await this.popupService.ConfirmAsync("Confirm", $"Are you sure to reset password of: {user.UserName} ?", AlertTypes.Warning);
            if (!confirmed) return;

            var newPassword = IdentityContract.DefaultUserPassword;
            var resetPasswordRequest = new UserUpdateRequest() { NewPassword = newPassword, ConfirmPassword = newPassword };
            var commonResult = await this.themisUserClient.UpdateUserAsync(user.Id, resetPasswordRequest);
            if (commonResult?.Succeeded ?? false)
            {
                await this.popupService.EnqueueSnackbarAsync($"User {user.UserName} password reset.", AlertTypes.Success);
            }
            else
            {
                await this.popupService.EnqueueSnackbarAsync($"User {user.UserName} password reset failed: {commonResult?.ToString()}", AlertTypes.Warning);
            }
        }
        catch (Exception ex)
        {
            await this.popupService.EnqueueSnackbarAsync(ex);
        }
    }

    protected async Task OnShowCreateUserModal()
    {
        this.UserRegisterRequest = new();
        this.ShowCreateUserModal = true;
    }

    protected async Task OnCreateUserModalSave()
    {
        if (string.IsNullOrWhiteSpace(this.UserRegisterRequest!.UserName))
        {
            await this.popupService.EnqueueSnackbarAsync($"User name is not allowed to be empty.", AlertTypes.Warning);
            return;
        }
        if (string.IsNullOrWhiteSpace(this.UserRegisterRequest.Email))
        {
            await this.popupService.EnqueueSnackbarAsync($"Email is not allowed to be empty.", AlertTypes.Warning);
            return;
        }
        if (string.IsNullOrWhiteSpace(this.UserRegisterRequest.PhoneNumber))
        {
            await this.popupService.EnqueueSnackbarAsync($"Phone number is not allowed to be empty.", AlertTypes.Warning);
            return;
        }

        this.UserRegisterRequest.Password = IdentityContract.DefaultUserPassword;
        this.UserRegisterRequest.ConfirmPassword = IdentityContract.DefaultUserPassword;

        try
        {
            var commonResult = await this.themisUserClient.RegisterUserAsync(this.UserRegisterRequest);
            if (commonResult?.Succeeded ?? false)
            {
                var user = commonResult.Entity!;
                this.Users.Add(user);
                this.ShowCreateUserModal = false;
                await this.popupService.EnqueueSnackbarAsync($"User {user.UserName} ({user.Id}) created.", AlertTypes.Success);
            }
            else
            {
                await this.popupService.EnqueueSnackbarAsync($"User {this.UserRegisterRequest.UserName} create failed: {commonResult?.ToString()}", AlertTypes.Warning);
            }
        }
        catch (Exception ex)
        {
            await this.popupService.EnqueueSnackbarAsync(ex);
        }
    }

    protected async Task OnCreateUserModelCancel()
    {
        this.ShowCreateUserModal = false;
    }
}
