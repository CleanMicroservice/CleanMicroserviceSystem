@page "/permission/users"
@attribute [Authorize(Policy = IdentityContract.ThemisAPIReadPolicyName)]
@inherits AphroditePageBase
@inject ILogger<ProfilePage> logger
@inject ThemisUserClient themisUserClient

<PageTitle>Users</PageTitle>

<MCard Elevation=0 Rounded="@("xl")">
    <MCardText Class="pa-6">
        <MRow>
            <MCol>
                <h6>Filters</h6>
            </MCol>
            <MSpacer></MSpacer>
            <MCol Cols="@("auto")">
                <MButton Rounded Color="primary" OnClick=this.LoadUsers Disabled=@this.LoadingUsers Loading=@this.LoadingUsers>
                    Search
                </MButton>
                </MCol>
                </MRow>
                <MRow Class="mt-3">
                <MCol Sm=12 Md=3>
                <MTextField Label="Id" @bind-Value="@this.Id" Type="number" TValue="int?"
                            Color="primary" HideDetails="@("auto")" BackgroundColor="grey lighten-4"
                            Clearable Filled Rounded Dense>
                </MTextField>
            </MCol>
            <MCol Sm=12 Md=3>
                <MTextField Label="Name" @bind-Value="@this.UserName"
                            Color="primary" HideDetails="@("auto")"
                            Clearable Filled Rounded Dense>
                </MTextField>
            </MCol>
            <MCol Sm=12 Md=3>
                <MTextField Label="Email" @bind-Value="@this.Email"
                            Color="primary" HideDetails="@("auto")"
                            Clearable Filled Rounded Dense>
                </MTextField>
            </MCol>
            <MCol Sm=12 Md=3>
                <MTextField Label="Phone" @bind-Value="@this.PhoneNumber"
                            Color="primary" HideDetails="@("auto")"
                            Clearable Filled Rounded Dense>
                </MTextField>
            </MCol>
        </MRow>
    </MCardText>
</MCard>

<MCard Elevation=0 Rounded="@("xl")" Class="mt-6">
    <MRow>
        <MSpacer></MSpacer>
        <MCol Cols="@("auto")">
            <MTextField Class="mx-3" Style="width:280px;" BackgroundColor="grey lighten-4" HideDetails="@("auto")"
                        @bind-Value="@this.LocalSearch" Placeholder="Search" Clearable Flat Dense Solo>
                <PrependInnerContent>
                    <MIcon Size=16 Class="neutral-lighten-1--text">mdi-magnify</MIcon>
                </PrependInnerContent>
            </MTextField>
        </MCol>
    </MRow>
    <MDataTable Headers="@this.userHeader" Search="@this.LocalSearch"
                Items="@this.PaginatedUsers.Values"
                TItem="UserInformationResponse"
                MultiSort FixedHeader>
        <ItemColContent>
            @switch (context.Header.Value)
            {
                case nameof(UserInformationResponse.Enabled):
                    <MChip Color="@(context.Item.Enabled?"blue":"orange")" TextColor="white" Ripple="false" OnClick="()=>this.ToggleUserEnabled(context.Item)">
                        <span>@(context.Item.Enabled ? "Enabled" : "Disabled")</span>
                    </MChip>
                    break;
                case "Actions":
                    <MButtonGroup Dense Borderless Rounded>
                    <MButton Depressed Small Color="primary">Edit</MButton>
                        <MButton Depressed Small Color="red">Delete</MButton>
                        </MButtonGroup>
                    break;
                default:
                    @context.Value
                    break;
            }
        </ItemColContent>
    </MDataTable>
</MCard>

@code {
    protected bool LoadingUsers { get; set; }
    protected IList<RoleInformationResponse>? Roles { get; set; }
    protected int? Id { get; set; }
    protected string? Role { get; set; }
    protected string? UserName { get; set; }
    protected string? Email { get; set; }
    protected string? PhoneNumber { get; set; }
    protected string? LocalSearch { get; set; }
    protected PaginatedEnumerable<UserInformationResponse> PaginatedUsers { get; set; } = PaginatedEnumerable<UserInformationResponse>.Empty;
    protected readonly List<DataTableHeader<UserInformationResponse>> userHeader = new()
    {
        new() { Value = nameof(UserInformationResponse.Id), Text=nameof(UserInformationResponse.Id), Filterable = true, Sortable = true },
        new() { Value = nameof(UserInformationResponse.UserName), Text=nameof(UserInformationResponse.UserName), Filterable = true, Sortable = true },
        new() { Value = nameof(UserInformationResponse.Email), Text=nameof(UserInformationResponse.Email), Filterable = true, Sortable = true },
        new() { Value = nameof(UserInformationResponse.PhoneNumber), Text=nameof(UserInformationResponse.PhoneNumber), Filterable = true, Sortable = true },
        new() { Value = nameof(UserInformationResponse.Enabled), Text=nameof(UserInformationResponse.Enabled), Filterable = true, Sortable = true },
        new() { Value = "Actions", Text="Actions", Filterable = false, Sortable = false},
    };
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await this.LoadUsers();
    }

    protected async Task LoadUsers()
    {
        this.LoadingUsers = true;
        try
        {
            var userSearch = new UserSearchRequest()
                {
                    Id = this.Id,
                    UserName = this.UserName,
                    Email = this.Email,
                    PhoneNumber = this.PhoneNumber,
                };
            this.PaginatedUsers = (await this.themisUserClient.SearchUsersAsync(userSearch)) ??
                PaginatedEnumerable<UserInformationResponse>.Empty;
        }
        catch (Exception ex)
        {
        }
        finally
        {
            this.LoadingUsers = false;
        }
    }

    protected async Task ToggleUserEnabled(UserInformationResponse user)
    {
        var newStatus = !user.Enabled;
        await this.themisUserClient.UpdateUserAsync(user.Id, new UserUpdateRequest() { Enabled = newStatus });
        user.Enabled = newStatus;
    }
}
