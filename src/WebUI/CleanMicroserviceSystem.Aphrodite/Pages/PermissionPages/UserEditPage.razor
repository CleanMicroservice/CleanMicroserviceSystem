@page "/permission/user/edit/{id}"
@attribute [Authorize(Policy = IdentityContract.ThemisAPIWritePolicyName)]
@inherits AphroditePageBase
@inject ILogger<UserEditPage> logger
@inject IPopupService popupService
@inject ThemisUserClient themisUserClient
@inject ThemisRoleClient themisRoleClient

<PageTitle>Edit User</PageTitle>

<MCard Flat Rounded=@("xl") Loading=this.CardLoading>
    <MCardTitle>
        <MRow>
            <MCol>Edit User</MCol>
            <MSpacer></MSpacer>
            <MCol Cols=@("auto")>
                <MButton Color="primary" Rounded Depressed
                         OnClick="this.OnUpdateUser">
                    <MIcon Class="mr-2">mdi-shield-account</MIcon>Save
                </MButton>
            </MCol>
        </MRow>
    </MCardTitle>
    <MCardSubtitle>User Id: @this.CurrentUser?.Id</MCardSubtitle>
    <MCardText>
        <MRow>
            <MCol Sm=12 Md=4>
                <MTextField Label="Name" @bind-Value="@this.UserUpdateRequest.UserName"
                            Color="primary" HideDetails=@("auto")
                            Clearable Filled Rounded Dense>
                </MTextField>
            </MCol>
            <MCol Sm=12 Md=4>
                <MTextField Label="Email" @bind-Value="@this.UserUpdateRequest.Email"
                            Color="primary" HideDetails=@("auto")
                            Clearable Filled Rounded Dense>
                </MTextField>
            </MCol>
            <MCol Sm=12 Md=4>
                <MTextField Label="Phone" @bind-Value="@this.UserUpdateRequest.PhoneNumber"
                            Color="primary" HideDetails=@("auto")
                            Clearable Filled Rounded Dense>
                </MTextField>
            </MCol>
        </MRow>
    </MCardText>
</MCard>

<MRow Class="mt-2">
    <MCol Md="6" Sm="12">
        <MCard Flat Rounded=@("xl") Loading=this.CardLoading>
            <MCardTitle>
                <MRow>
                    <MCol Cols=@("auto")>Roles</MCol>
                    <MSpacer></MSpacer>
                    <MCol OrderLg=3 Cols=@("auto")>
                        <MButton Color="primary" Rounded Depressed
                                 OnClick="this.OnUpdateUserRoles">
                            <MIcon Class="mr-2">mdi-account-group</MIcon>Save
                        </MButton>
                    </MCol>
                    <MCol Cols=12 Lg=@("auto")>
                        <MTextField Color="primary" BackgroundColor="grey lighten-4" HideDetails=@("auto")
                                    Placeholder="Search Roles" @bind-Value="@this.LocalRolesSearchKeyword"
                                    Clearable Rounded Flat Dense Solo>
                            <PrependInnerContent>
                                <MIcon Class="neutral-lighten-1--text">mdi-magnify</MIcon>
                            </PrependInnerContent>
                        </MTextField>
                    </MCol>
                </MRow>
            </MCardTitle>
            <MCardSubtitle>Selected roles: @this.UserRoles.Count</MCardSubtitle>
            <MCardText>
                <MTreeview TItem="RoleInformationResponse" TKey="string"
                           Items="this.AllRoles" @bind-Value="this.UserRoles"
                           Selectable OpenAll Rounded Hoverable Dense
                           Search=@this.LocalRolesSearchKeyword
                           SelectedColor="primary" SelectionType=SelectionType.Independent
                           ItemText="role=>role.RoleName" ItemKey="role=>role.RoleName"
                           ItemChildren="role=>null">
                </MTreeview>
            </MCardText>
        </MCard>
    </MCol>
    <MCol Md="6" Sm="12">
        <MCard Flat Rounded=@("xl") Loading=this.CardLoading>
            <MCardTitle>
                <MRow>
                    <MCol Cols=@("auto")>Claims</MCol>
                    <MSpacer></MSpacer>
                    <MCol OrderLg=3 Cols=@("auto")>
                        <MButton Color="primary" Rounded Depressed
                                 OnClick="this.OnUpdateUserClaims">
                            <MIcon Class="mr-2">mdi-security</MIcon>Save
                        </MButton>
                    </MCol>
                    <MCol Cols=12 Lg=@("auto")>
                        <MTextField Color="primary" BackgroundColor="grey lighten-4" HideDetails=@("auto")
                                    Placeholder="Search Roles" @bind-Value="@this.LocalClaimsSearchKeyword"
                                    Clearable Rounded Flat Dense Solo>
                            <PrependInnerContent>
                                <MIcon Class="neutral-lighten-1--text">mdi-magnify</MIcon>
                            </PrependInnerContent>
                        </MTextField>
                    </MCol>
                </MRow>
            </MCardTitle>
            <MCardSubtitle>Selected claims: @this.UserClaims.Count</MCardSubtitle>
            <MCardText>
                <MTreeview TItem="UserClaimTreeModel" TKey="(string, string)"
                           Items="this.AllClaims" @bind-Value="this.UserClaims"
                           Selectable OpenAll Rounded Hoverable Dense
                           Search=@this.LocalClaimsSearchKeyword
                           SelectedColor="primary" SelectionType=SelectionType.Leaf
                           ItemText=@(claim=>$"{claim.Type}: {claim.Value}") ItemKey="claim=>new (claim.Type, claim.Value)"
                           ItemChildren="claim=>claim.Children">
                </MTreeview>
            </MCardText>
        </MCard>
    </MCol>
</MRow>

@code {
    [Parameter]
    public string? Id { get; set; }

    public class UserClaimTreeModel
    {
        public string Type { get; set; }

        public string Value { get; set; }

        public List<UserClaimTreeModel> Children { get; set; }
    }

    protected StringBoolean CardLoading { get; set; }
    protected string? LocalRolesSearchKeyword { get; set; }
    protected string? LocalClaimsSearchKeyword { get; set; }
    protected UserInformationResponse CurrentUser { get; set; } = new UserInformationResponse();
    protected UserUpdateRequest UserUpdateRequest { get; set; } = new UserUpdateRequest();
    protected List<RoleInformationResponse> AllRoles { get; set; } = new List<RoleInformationResponse>();
    protected List<string> UserRoles { get; set; } = new List<string>();
    protected List<UserClaimTreeModel> AllClaims { get; set; } = new List<UserClaimTreeModel>();
    protected List<(string ClaimType, string ClaimValue)> UserClaims { get; set; } = new List<(string, string)>();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (string.IsNullOrEmpty(this.Id) || !int.TryParse(this.Id, out var userId))
        {
            await this.popupService.EnqueueSnackbarAsync($"Invalid user id: {this.Id}", AlertTypes.Error);
            return;
        }

        try
        {
            this.CardLoading = true;
            var user = await this.themisUserClient.GetUserAsync(userId);
            if (user is null)
            {
                await this.popupService.EnqueueSnackbarAsync($"Not found user {userId}", AlertTypes.Error);
                return;
            }

            this.CurrentUser = user!;
            this.UserUpdateRequest = new()
                {
                    Email = this.CurrentUser.Email,
                    UserName = this.CurrentUser.UserName,
                    PhoneNumber = this.CurrentUser.PhoneNumber,
                };

            var allRoles = await this.themisRoleClient.GetRolesAsync();
            this.AllRoles.Clear();
            this.AllRoles.AddRange(allRoles ?? Enumerable.Empty<RoleInformationResponse>());

            var userRoles = await this.themisUserClient.GetUserRolesAsync(userId);
            this.UserRoles.Clear();
            this.UserRoles.AddRange(userRoles?.Select(role => role.RoleName!) ?? Enumerable.Empty<string>());

            var allClaims = await this.themisUserClient.SearchUserClaimsAsync(new ClaimSearchRequest());
            var claimTreeModels = (allClaims?.Values ?? Enumerable.Empty<ClaimInformationResponse>())
                .GroupBy(claim => claim.Type)
                .Select(group => new UserClaimTreeModel()
                    {
                        Type = group.Key,
                        Children = group.Select(claim => new UserClaimTreeModel() { Type = claim.Type, Value = claim.Value }).ToList(),
                    });
            this.AllClaims.Clear();
            this.AllClaims.AddRange(claimTreeModels);

            var userClaims = await this.themisUserClient.GetUserClaimsAsync(userId);
            this.UserClaims.Clear();
            this.UserClaims.AddRange((userClaims ?? Enumerable.Empty<ClaimInformationResponse>()).Select(claim => (claim.Type, claim.Value)));
        }
        catch (Exception ex)
        {
            await this.popupService.EnqueueSnackbarAsync(ex);
        }
        finally
        {
            this.CardLoading = false;
        }
    }

    protected async Task OnUpdateUser()
    {
        var confirmed = await this.popupService.ConfirmAsync("Confirm", $"Are you sure to update user: {this.UserUpdateRequest!.UserName} ({this.CurrentUser!.Id}) ?", AlertTypes.Warning);
        if (!confirmed) return;

        if (string.IsNullOrWhiteSpace(this.UserUpdateRequest!.UserName))
        {
            await this.popupService.EnqueueSnackbarAsync($"User name is not allowed to be empty.", AlertTypes.Warning);
            return;
        }
        if (string.IsNullOrWhiteSpace(this.UserUpdateRequest.Email))
        {
            await this.popupService.EnqueueSnackbarAsync($"Email is not allowed to be empty.", AlertTypes.Warning);
            return;
        }
        if (string.IsNullOrWhiteSpace(this.UserUpdateRequest.PhoneNumber))
        {
            await this.popupService.EnqueueSnackbarAsync($"Phone number is not allowed to be empty.", AlertTypes.Warning);
            return;
        }

        try
        {
            var commonResult = await this.themisUserClient.UpdateUserAsync(this.CurrentUser.Id, this.UserUpdateRequest);
            if (commonResult?.Succeeded ?? false)
            {
                this.CurrentUser.Email = this.UserUpdateRequest.Email;
                this.CurrentUser.UserName = this.UserUpdateRequest.UserName;
                this.CurrentUser.PhoneNumber = this.UserUpdateRequest.PhoneNumber;
                await this.popupService.EnqueueSnackbarAsync($"User {this.CurrentUser.UserName} ({this.CurrentUser.Id}) updated.", AlertTypes.Success);
            }
            else
            {
                await this.popupService.EnqueueSnackbarAsync($"User {this.UserUpdateRequest.UserName} ({this.CurrentUser.Id}) update failed: {commonResult.ToString()}", AlertTypes.Warning);
            }
        }
        catch (Exception ex)
        {
            await this.popupService.EnqueueSnackbarAsync(ex);
        }
    }

    protected async Task OnUpdateUserRoles()
    {
        var confirmed = await this.popupService.ConfirmAsync("Confirm", $"Are you sure to update user roles: {this.CurrentUser!.UserName} ({this.CurrentUser!.Id}) ?", AlertTypes.Warning);
        if (!confirmed) return;

        try
        {
            var commonResult = await this.themisUserClient.UpdateUserRolesAsync(this.CurrentUser.Id, this.UserRoles);
            if (commonResult?.Succeeded ?? false)
            {
                await this.popupService.EnqueueSnackbarAsync($"User roles {this.CurrentUser.UserName} ({this.CurrentUser.Id}) updated.", AlertTypes.Success);
            }
            else
            {
                await this.popupService.EnqueueSnackbarAsync($"User roles {this.CurrentUser.UserName} ({this.CurrentUser.Id}) update failed: {commonResult?.ToString()}", AlertTypes.Warning);
            }
        }
        catch (Exception ex)
        {
            await this.popupService.EnqueueSnackbarAsync(ex);
        }
    }

    protected async Task OnUpdateUserClaims()
    {
        var confirmed = await this.popupService.ConfirmAsync("Confirm", $"Are you sure to update user claims: {this.CurrentUser!.UserName} ({this.CurrentUser!.Id}) ?", AlertTypes.Warning);
        if (!confirmed) return;

        try
        {
            var userClaimRequests = this.UserClaims.Select(claim => new ClaimUpdateRequest() { Type = claim.ClaimType, Value = claim.ClaimValue}).ToArray();
            var commonResult = await this.themisUserClient.UpdateUserClaimsAsync(this.CurrentUser.Id, userClaimRequests);
            if (commonResult?.Succeeded ?? false)
            {
                await this.popupService.EnqueueSnackbarAsync($"User claims {this.CurrentUser.UserName} ({this.CurrentUser.Id}) updated.", AlertTypes.Success);
            }
            else
            {
                await this.popupService.EnqueueSnackbarAsync($"User claims {this.CurrentUser.UserName} ({this.CurrentUser.Id}) update failed: {commonResult?.ToString()}", AlertTypes.Warning);
            }
        }
        catch (Exception ex)
        {
            await this.popupService.EnqueueSnackbarAsync(ex);
        }
    }
}
